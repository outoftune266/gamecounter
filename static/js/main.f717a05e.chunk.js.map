{"version":3,"sources":["components/Header/header.js","components/Gamelisting/gamelisting.js","components/Footer/footer.js","pages/Homepage/homepage.js","components/Playercard/playercard.js","pages/Phase10/phase10.js","utils/AscensionStore.js","components/AscensionPlayercard/ascensionplayercard.js","pages/Ascension/ascension.js","components/MunchkinPlayercard/munchkinplayercard.js","pages/Munchkin/munchkin.js","App.js","reportWebVitals.js","index.js"],"names":["Header","class","Gamelisting","to","type","Footer","Homepage","Playercard","player","changeName","advancePhase","updateScore","id","onClick","name","phase","score","Phase10Game","useState","playerCount","setPlayerCount","players","setPlayers","playerList","setPlayerList","updateStates","playerlist","transformedList","map","console","log","target","playerID","playerName","prompt","i","length","alert","updateScore2","Number","points","push","tabindex","initialAscensionState","honor","AscensionContext","React","createContext","AscensionStore","children","ascensionState","setAscensionState","Provider","value","AscensionPlayercard","useContext","AscensionGame","state","updateHonor","useEffect","Munchkinplayercard","levelUp","levelDown","level","MunchkinGame","App","className","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f717a05e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <nav class=\"navbar navbar-light bg-light\">\n      <div class=\"container-fluid\">\n        <span class=\"navbar-brand mb-0 h1\">Card Game Counter</span>\n      </div>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Gamelisting() {\n  return (\n    <div>\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">Phase 10: 2-6 players</span>\n          <Link to=\"/phase10\">\n            <button type=\"button\" class=\"btn btn-success\">\n              Play!\n            </button>\n          </Link>\n        </div>\n      </nav>\n      {/* <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">Ascnension: 2-4 players</span>\n          <Link to=\"/ascension\">\n            <button type=\"button\" class=\"btn btn-success\">\n              Play!\n            </button>\n          </Link>\n        </div>\n      </nav> */}\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">Munchkin: 3-6 players</span>\n          <Link to=\"/munchkin\">\n            <button type=\"button\" class=\"btn btn-success\">\n              Play!\n            </button>\n          </Link>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default Gamelisting;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer class=\"navbar navbar-light bg-light\">\n      <div class=\"container-fluid\">\n        <span class=\"navbar-brand mb-0 h1\"> &copy; Zak Monnet, 2021</span>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Header from \"../../components/Header/header\";\nimport Gamelisting from \"../../components/Gamelisting/gamelisting\";\nimport Footer from \"../../components/Footer/footer\";\n\nfunction Homepage() {\n  return (\n    <div>\n      <Header></Header>\n      <Gamelisting></Gamelisting>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\n\nfunction Playercard({ player, changeName, advancePhase, updateScore }) {\n  return (\n    <nav class=\"navbar navbar-light bg-light\">\n      <div class=\"container-fluid\">\n        <span id={player.id} class=\"navbar-brand mb-0 h1\" onClick={changeName}>\n          {player.name}\n        </span>\n        <button\n          id={player.id}\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={advancePhase}\n        >\n          Phase <span>{player.phase}</span>\n        </button>\n        <button\n          id={player.id}\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={updateScore}\n        >\n          Score: <span>{player.score}</span>\n        </button>\n      </div>\n      <div class=\"container-fluid\"></div>\n    </nav>\n  );\n}\n\nexport default Playercard;\n","import React, { useState } from \"react\";\nimport Playercard from \"../../components/Playercard/playercard\";\nimport Footer from \"../../components/Footer/footer\";\n\nfunction Phase10Game() {\n  const [playerCount, setPlayerCount] = useState(1);\n  const [players, setPlayers] = useState([]);\n  const [playerList, setPlayerList] = useState();\n\n  function updateStates(playerlist) {\n    let transformedList = playerlist.map((player) => (\n      <Playercard\n        player={player}\n        changeName={changeName}\n        advancePhase={advancePhase}\n        updateScore={updateScore}\n      />\n    ));\n    setPlayerList(transformedList);\n    console.log(playerlist);\n    setPlayers(playerlist);\n    console.log(players);\n  }\n\n  function changeName(target) {\n    console.log(target.target.id);\n    let playerlist = players;\n    let playerID = target.target.id;\n    let playerName = prompt(\"What is this player's name?\");\n    if (playerName != null && playerName != \"\") {\n      for (let i = 0; i < players.length; i++) {\n        if (playerlist[i].id == playerID) {\n          playerlist[i].name = playerName;\n          updateStates(playerlist);\n          break;\n        }\n      }\n    } else {\n      alert(\"You didn't enter a valid name. Try again\");\n    }\n  }\n\n  function advancePhase(target) {\n    console.log(target.target.id);\n    let playerID = target.target.id;\n    let playerlist = players;\n    for (let i = 0; i < players.length; i++) {\n      if (playerlist[i].id == playerID) {\n        playerlist[i].phase += 1;\n        updateStates(playerlist);\n        break;\n      }\n    }\n  }\n\n  function updateScore(target) {\n    let playerID = target.target.id;\n    let playerlist = players;\n    let points;\n    for (let i = 0; i < playerlist.length; i++) {\n      if (playerlist[i].id == playerID) {\n        points = Number(\n          prompt(\n            `How many points do you want to add to ${playerlist[i].name}'s score?`\n          )\n        );\n        updateScore2(playerID, playerlist, points);\n        break;\n      }\n    }\n  }\n\n  function updateScore2(playerID, playerlist, points) {\n    // let points = Number(prompt(\"How many points are you adding?\"));\n    for (let i = 0; i < playerlist.length; i++) {\n      if (playerlist[i].id == playerID) {\n        playerlist[i].score += points;\n        updateStates(playerlist);\n        break;\n      }\n    }\n  }\n\n  function addPlayer() {\n    setPlayerCount(playerCount + 1);\n    console.log(playerCount);\n    let playerlist = players;\n\n    playerlist.push({\n      id: playerCount,\n      name: \"Player \" + playerCount,\n      phase: 1,\n      score: 0,\n    });\n\n    updateStates(playerlist);\n  }\n\n  return (\n    <div>\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">Phase 10</span>\n          <button type=\"button\" class=\"btn btn-success\" onClick={addPlayer}>\n            + Players\n          </button>\n        </div>\n      </nav>\n      {playerList}\n\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            data-bs-toggle=\"modal\"\n            data-bs-target=\"#exampleModal\"\n          >\n            Instructions\n          </button>\n        </div>\n      </nav>\n\n      <div\n        class=\"modal fade\"\n        id=\"exampleModal\"\n        tabindex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                Instructions\n              </h5>\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              ></button>\n            </div>\n            <div class=\"modal-body\">\n              {\" \"}\n              Start by adding Players. Press Player's name to Edit. Press Phase\n              button to advance. Press Score button to add points. Keep track of\n              your score or the whole groups! Have fun!\n            </div>\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                data-bs-dismiss=\"modal\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default Phase10Game;\n","import React, { useState } from \"react\";\n\nconst initialAscensionState = {\n  honor: 60,\n  players: [\n    {\n      id: 1,\n      name: \"Player 1\",\n      score: 0,\n    },\n    {\n      id: 2,\n      name: \"Player 2\",\n      score: 0,\n    },\n  ],\n};\n\nexport const AscensionContext = React.createContext();\n\nconst AscensionStore = ({ children }) => {\n  const [ascensionState, setAscensionState] = useState(initialAscensionState);\n\n  return (\n    <AscensionContext.Provider value={{ ascensionState, setAscensionState }}>\n      {children}\n    </AscensionContext.Provider>\n  );\n};\n\nexport default AscensionStore;\n","import React, { useContext } from \"react\";\nimport { AscensionContext } from \"../../utils/AscensionStore\";\n\n// function AscensionPlayercard({ player, changeName, updateScore }) {\n//   return (\n//     <nav class=\"navbar navbar-light bg-light\">\n//       <div class=\"container-fluid\">\n//         <span id={player.id} class=\"navbar-brand mb-0 h1\" onClick={changeName}>\n//           {player.name}\n//         </span>\n//         <button\n//           id={player.id}\n//           type=\"button\"\n//           class=\"btn btn-primary\"\n//           onClick={updateScore}\n//         >\n//           Honor: <span>{player.honor}</span>\n//         </button>\n//       </div>\n//       <div class=\"container-fluid\"></div>\n//     </nav>\n//   );\n// }\n\nfunction AscensionPlayercard({ updateScore, players }) {\n  const { ascensionState } = useContext(AscensionContext);\n  console.log(players);\n  return (\n    <div>\n      {ascensionState.players.map((player) => (\n        <nav class=\"navbar navbar-light bg-light\" key={player.id}>\n          <div class=\"container-fluid\">\n            <span id={player.id} class=\"navbar-brand mb-0 h1\">\n              {player.name}\n            </span>\n            <button\n              id={player.id}\n              type=\"button\"\n              class=\"btn btn-primary\"\n              onClick={updateScore}\n            >\n              Honor: <span>{player.score}</span>\n            </button>\n          </div>\n          <div class=\"container-fluid\"></div>\n        </nav>\n      ))}\n    </div>\n  );\n}\n\nexport default AscensionPlayercard;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Footer from \"../../components/Footer/footer\";\nimport AscensionPlayercard from \"../../components/AscensionPlayercard/ascensionplayercard\";\nimport { AscensionContext } from \"../../utils/AscensionStore\";\n\nimport Playercard from \"../../components/Playercard/playercard\";\n\nfunction AscensionGame() {\n  const [playerCount, setPlayerCount] = useState(1);\n  const [players, setPlayers] = useState([]);\n  const [playerList, setPlayerList] = useState();\n  const [remainingHonor, setRemainingHonor] = useState(0);\n\n  const { ascensionState, setAscensionState } = useContext(AscensionContext);\n\n  useEffect(() => {\n    console.log(ascensionState);\n  });\n\n  function updateStates(playerlist, points) {\n    console.log(points);\n    if (points) {\n      console.log(remainingHonor);\n      let honor = remainingHonor - points;\n      console.log(honor);\n      //setRemainingHonor(remainingHonor - points);\n    }\n    let transformedList = playerlist.map((player) => (\n      <AscensionPlayercard\n        player={player}\n        changeName={changeName}\n        updateScore={updateScore}\n      />\n    ));\n    setPlayerList(transformedList);\n    setPlayers(playerlist);\n  }\n\n  // function updateScore(target) {\n  //   let playerID = target.target.id;\n  //   let playerlist = players;\n  //   let points;\n  //   for (let i = 0; i < playerlist.length; i++) {\n  //     if (playerlist[i].id == playerID) {\n  //       points = Number(\n  //         prompt(\n  //           `How many honor do you want to add to ${playerlist[i].name}'s score?`\n  //         )\n  //       );\n  //       updateScore2(playerID, playerlist, points);\n  //       break;\n  //     }\n  //   }\n  // }\n\n  function updateScore(target) {\n    console.log(target.target.id);\n    let playerID = target.target.id;\n    let state = ascensionState;\n    let points;\n\n    for (let i = 0; i < state.players.length; i++) {\n      if (state.players[i].id == playerID) {\n        points = Number(\n          prompt(\n            `How many honor do you want to add to ${state.players[i].name}'s score?'`\n          )\n        );\n        updateHonor(playerID, points, state);\n      }\n    }\n  }\n\n  function updateHonor(playerID, points, state) {\n    for (let i = 0; i < state.players.length; i++) {\n      if (state.players[i].id == playerID) {\n        state.players[i].score += points;\n        state.honor = state.honor - points;\n        console.log(state);\n        setAscensionState(state);\n        // console.log(state.players[i].score);\n        // console.log(state.honor);\n        // console.log(ascensionState);\n      }\n    }\n  }\n\n  function updateScore2(playerID, playerlist, points) {\n    for (let i = 0; i < playerlist.length; i++) {\n      if (playerlist[i].id == playerID) {\n        playerlist[i].honor += points;\n        updateStates(playerlist, points);\n        break;\n      }\n    }\n  }\n\n  function changeName(target) {\n    console.log(target.target.id);\n    let playerlist = players;\n    let playerID = target.target.id;\n    let playerName = prompt(\"What is this player's name\");\n    if (playerName != null && playerName != \"\") {\n      for (let i = 0; i < players.length; i++) {\n        if (playerlist[i].id == playerID) {\n          playerlist[i].name = playerName;\n          updateStates(playerlist);\n          break;\n        }\n      }\n    } else {\n      alert(\"You didn't enter a valid name. Try again\");\n    }\n  }\n\n  // function addPlayer() {\n  //   if (playerCount == 5) {\n  //     alert(\"4 is the maximum number of players for this game\");\n  //   } else {\n  //     setRemainingHonor(remainingHonor + 30);\n  //     setPlayerCount(playerCount + 1);\n  //     console.log(playerCount);\n  //     console.log(remainingHonor);\n  //     let playerlist = players;\n\n  //     playerlist.push({\n  //       id: playerCount,\n  //       name: \"Player \" + playerCount,\n  //       honor: 0,\n  //     });\n  //     updateStates(playerlist);\n  //   }\n  // }\n\n  function addPlayer() {\n    if (ascensionState.players.length == 4) {\n      alert(\"4 is the maximum number of players for this game\");\n    } else {\n      let playerlist = ascensionState.players;\n\n      playerlist.push({\n        id: playerlist.length + 1,\n        name: \"Player \" + (playerlist.length + 1),\n        score: 0,\n      });\n\n      setAscensionState({\n        honor: ascensionState.honor + 30,\n        players: playerlist,\n      });\n    }\n  }\n\n  return (\n    <div>\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">\n            Ascension: Chronicle of the Godslayer\n          </span>\n\n          <button type=\"button\" class=\"btn btn-success\" onClick={addPlayer}>\n            + Player\n          </button>\n        </div>\n      </nav>\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">\n            Remaining Honor Pool: {ascensionState.honor}\n          </span>\n        </div>\n      </nav>\n      {/* {playerList} */}\n      <AscensionPlayercard\n        updateScore={updateScore}\n        players={ascensionState.players}\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default AscensionGame;\n","import React from \"react\";\n\nfunction Munchkinplayercard({ player, changeName, levelUp, levelDown }) {\n  return (\n    <nav class=\"navbar navbar-light bg-light\">\n      <div class=\"container-fluid\">\n        <span id={player.id} class=\"navbar-brand mb-0 h1\" onClick={changeName}>\n          {player.name}\n        </span>\n        <span>{player.level}</span>\n        <button\n          id={player.id}\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={levelUp}\n        >\n          Lvl +\n        </button>\n        <button\n          id={player.id}\n          type=\"button\"\n          class=\"btn btn-primary\"\n          onClick={levelDown}\n        >\n          Lvl -\n        </button>\n      </div>\n      <div class=\"container-fluid\"></div>\n    </nav>\n  );\n}\n\nexport default Munchkinplayercard;\n","import React, { useState } from \"react\";\nimport Playercard from \"../../components/Playercard/playercard\";\nimport Munchkinplayercard from \"../../components/MunchkinPlayercard/munchkinplayercard\";\nimport Footer from \"../../components/Footer/footer\";\n\nfunction MunchkinGame() {\n  const [playerCount, setPlayerCount] = useState(1);\n  const [players, setPlayers] = useState([]);\n  const [playerList, setPlayerList] = useState();\n\n  function updateStates(playerlist) {\n    let transformedList = playerlist.map((player) => (\n      <Munchkinplayercard\n        player={player}\n        changeName={changeName}\n        levelUp={levelUp}\n        levelDown={levelDown}\n      />\n    ));\n    setPlayerList(transformedList);\n    console.log(playerlist);\n    setPlayers(playerlist);\n    console.log(players);\n  }\n\n  function changeName(target) {\n    console.log(target.target.id);\n    let playerlist = players;\n    let playerID = target.target.id;\n    let playerName = prompt(\"What is this player's name?\");\n    if (playerName != null && playerName != \"\") {\n      for (let i = 0; i < players.length; i++) {\n        if (playerlist[i].id == playerID) {\n          playerlist[i].name = playerName;\n          updateStates(playerlist);\n          break;\n        }\n      }\n    } else {\n      alert(\"You didn't enter a valid name. Try again\");\n    }\n  }\n\n  function levelUp(target) {\n    console.log(target.target.id);\n    let playerID = target.target.id;\n    let playerlist = players;\n    for (let i = 0; i < players.length; i++) {\n      if (playerlist[i].id == playerID) {\n        playerlist[i].level += 1;\n        updateStates(playerlist);\n        break;\n      }\n    }\n  }\n\n  function levelDown(target) {\n    console.log(target.target.id);\n    let playerID = target.target.id;\n    let playerlist = players;\n    for (let i = 0; i < players.length; i++) {\n      if (playerlist[i].id == playerID) {\n        playerlist[i].level -= 1;\n        updateStates(playerlist);\n        break;\n      }\n    }\n  }\n\n  function addPlayer() {\n    setPlayerCount(playerCount + 1);\n    console.log(playerCount);\n    let playerlist = players;\n\n    playerlist.push({\n      id: playerCount,\n      name: \"Player \" + playerCount,\n      level: 1,\n    });\n    updateStates(playerlist);\n  }\n\n  return (\n    <div>\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <span class=\"navbar-brand mb-0 h1\">Munchkin</span>\n          <button type=\"button\" class=\"btn btn-success\" onClick={addPlayer}>\n            + Players\n          </button>\n        </div>\n      </nav>\n      {playerList}\n\n      <nav class=\"navbar navbar-light bg-light\">\n        <div class=\"container-fluid\">\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            data-bs-toggle=\"modal\"\n            data-bs-target=\"#exampleModal\"\n          >\n            Instructions\n          </button>\n        </div>\n      </nav>\n\n      <div\n        class=\"modal fade\"\n        id=\"exampleModal\"\n        tabindex=\"-1\"\n        aria-labelledby=\"exampleModalLabel\"\n        aria-hidden=\"true\"\n      >\n        <div class=\"modal-dialog\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <h5 class=\"modal-title\" id=\"exampleModalLabel\">\n                Instructions\n              </h5>\n              <button\n                type=\"button\"\n                class=\"btn-close\"\n                data-bs-dismiss=\"modal\"\n                aria-label=\"Close\"\n              ></button>\n            </div>\n            <div class=\"modal-body\">\n              {\" \"}\n              Start by adding Players. Press Player's name to Edit.\n            </div>\n            <div class=\"modal-footer\">\n              <button\n                type=\"button\"\n                class=\"btn btn-secondary\"\n                data-bs-dismiss=\"modal\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default MunchkinGame;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from \"./pages/Homepage/homepage\";\nimport Phase10Game from \"./pages/Phase10/phase10\";\nimport AscensionGame from \"./pages/Ascension/ascension\";\nimport AscensionStore from \"./utils/AscensionStore\";\nimport MunchkinGame from \"./pages/Munchkin/munchkin\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/gamecounter/\">\n            <Homepage />\n          </Route>\n          <Route exact path=\"/phase10/\">\n            <Phase10Game />\n          </Route>\n          <Route exact path=\"/ascension/\">\n            <AscensionStore>\n              <AscensionGame />\n            </AscensionStore>\n          </Route>\n          <Route exact path=\"/munchkin/\">\n            <MunchkinGame />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}